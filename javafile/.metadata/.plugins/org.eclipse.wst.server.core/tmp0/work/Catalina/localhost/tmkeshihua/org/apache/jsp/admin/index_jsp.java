/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.29
 * Generated at: 2021-06-05 03:39:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import web.bean.*;
import web.util.*;
import web.service.*;
import web.dao.impl.*;
import web.dao.*;
import web.controller.*;
import web.controller.helper.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("web.dao");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("web.controller");
    _jspx_imports_packages.add("web.controller.helper");
    _jspx_imports_packages.add("web.util");
    _jspx_imports_packages.add("web.bean");
    _jspx_imports_packages.add("web.dao.impl");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("web.service");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("     <link rel=\"stylesheet\" href=\"css/index_admin.css\" />\r\n");
      out.write("    <script src=\"js/echarts.min.js\" ></script>\r\n");
      out.write("    <script src=\"js/jquery.js\" ></script>\r\n");
      out.write("    <script>// 柱状图模块1\r\n");
      out.write("    function zzchart() {\r\n");
      out.write("    \t  // 1实例化对象\r\n");
      out.write("    \t  var myChart = echarts.init(document.querySelector(\".zzchart\"));\r\n");
      out.write("    \t  // 2. 指定配置项和数据\r\n");
      out.write("    \t  var option = {\r\n");
      out.write("    \t    color: [\"#2f89cf\"],\r\n");
      out.write("    \t    tooltip: {\r\n");
      out.write("    \t      trigger: \"axis\",\r\n");
      out.write("    \t      axisPointer: {\r\n");
      out.write("    \t        // 坐标轴指示器，坐标轴触发有效\r\n");
      out.write("    \t        type: \"shadow\" // 默认为直线，可选为：'line' | 'shadow'\r\n");
      out.write("    \t      }\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    // 修改图表的大小\r\n");
      out.write("    \t    grid: {\r\n");
      out.write("    \t      left: \"0%\",\r\n");
      out.write("    \t      top: \"10px\",\r\n");
      out.write("    \t      right: \"0%\",\r\n");
      out.write("    \t      bottom: \"4%\",\r\n");
      out.write("    \t      containLabel: true\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    xAxis: [\r\n");
      out.write("    \t      {\r\n");
      out.write("    \t        type: \"category\",\r\n");
      out.write("    \t        data: [],\r\n");
      out.write("    \t        axisTick: {\r\n");
      out.write("    \t          alignWithLabel: true\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        // 修改刻度标签 相关样式\r\n");
      out.write("    \t        axisLabel: {\r\n");
      out.write("    \t          color: \"rgba(255,255,255,.6) \",\r\n");
      out.write("    \t          fontSize: \"12\"\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        // 不显示x坐标轴的样式\r\n");
      out.write("    \t        axisLine: {\r\n");
      out.write("    \t          show: false\r\n");
      out.write("    \t        }\r\n");
      out.write("    \t      }\r\n");
      out.write("    \t    ],\r\n");
      out.write("    \t    yAxis: [\r\n");
      out.write("    \t      {\r\n");
      out.write("    \t        type: \"value\",\r\n");
      out.write("    \t        // 修改刻度标签 相关样式\r\n");
      out.write("    \t        axisLabel: {\r\n");
      out.write("    \t          color: \"rgba(255,255,255,.6) \",\r\n");
      out.write("    \t          fontSize: 12\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        // y轴的线条改为了 2像素\r\n");
      out.write("    \t        axisLine: {\r\n");
      out.write("    \t          lineStyle: {\r\n");
      out.write("    \t            color: \"rgba(255,255,255,.1)\",\r\n");
      out.write("    \t            width: 2\r\n");
      out.write("    \t          }\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        // y轴分割线的颜色\r\n");
      out.write("    \t        splitLine: {\r\n");
      out.write("    \t          lineStyle: {\r\n");
      out.write("    \t            color: \"rgba(255,255,255,.1)\"\r\n");
      out.write("    \t          }\r\n");
      out.write("    \t        }\r\n");
      out.write("    \t      }\r\n");
      out.write("    \t    ],\r\n");
      out.write("    \t    series: [\r\n");
      out.write("    \t      {\r\n");
      out.write("    \t        name: \"总销量\",\r\n");
      out.write("    \t        type: \"bar\",\r\n");
      out.write("    \t        barWidth: \"35%\",\r\n");
      out.write("    \t        data:[],\r\n");
      out.write("    \t        itemStyle: {\r\n");
      out.write("    \t          // 修改柱子圆角\r\n");
      out.write("    \t          barBorderRadius: 5\r\n");
      out.write("    \t        }\r\n");
      out.write("    \t      }\r\n");
      out.write("    \t    ]\r\n");
      out.write("    \t  };\r\n");
      out.write("    \t  // 3. 把配置项给实例对象\r\n");
      out.write("    \t  myChart.setOption(option);\r\n");
      out.write("    \t window.addEventListener(\"resize\", function() {\r\n");
      out.write("    \t    myChart.resize();\r\n");
      out.write("    \t  });\r\n");
      out.write("    \t myChart.showLoading();\r\n");
      out.write("    \t var shops=[];\r\n");
      out.write("    \t var nums=[];\r\n");
      out.write("    \t $.ajax({\r\n");
      out.write("    \t\t type:\"post\",\r\n");
      out.write("    \t \tasync:true,\r\n");
      out.write("    \t \turl:\"bar.do\",\r\n");
      out.write("    \t \tdata:{},\r\n");
      out.write("    \t \tdataType:\"json\",\r\n");
      out.write("    \t \tsuccess:function(result){\r\n");
      out.write("    \t \t\tif(result){\r\n");
      out.write("    \t \t\t\tfor(var i=0;i<result.length;i++){\r\n");
      out.write("    \t \t\t\t\tshops.push(result[i].name);\r\n");
      out.write("    \t \t\t\t}\r\n");
      out.write("    \t \t\t\tfor(var i=0;i<result.length;i++){\r\n");
      out.write("    \t \t\t\t\tnums.push(result[i].totalamount);\r\n");
      out.write("    \t \t\t\t}\r\n");
      out.write("    \t \t\t\tmyChart.hideLoading();\r\n");
      out.write("    \t \t\t\tmyChart.setOption({\r\n");
      out.write("    \t \t\t\t\txAxis:{data:shops},\r\n");
      out.write("    \t \t\t\t\tseries:[{\r\n");
      out.write("    \t \t\t\t\t\tname:'总销量',\r\n");
      out.write("    \t \t\t\t\t\tdata:nums\r\n");
      out.write("    \t \t\t\t\t}]\r\n");
      out.write("    \t \t\t\t})\r\n");
      out.write("    \t \t\t}\t\r\n");
      out.write("    \t \t},\r\n");
      out.write("    \t\terror:function(errorMsg){\r\n");
      out.write("    \t\t\talert(\"图表数据请求失败！\");\r\n");
      out.write("    \t\t\tmyChart.hideLoading();\r\n");
      out.write("    \t\t}\t \r\n");
      out.write("    \t })\r\n");
      out.write("    \t};\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("    \t\r\n");
      out.write("    \t\r\n");
      out.write("    \t<script>\r\n");
      out.write("    \t// 柱状图2\r\n");
      out.write("    \tfunction   zzchart2() {\r\n");
      out.write("    \t  var myColor = [\"#1089E7\", \"#F57474\", \"#56D0E3\", \"#F8B448\", \"#8B78F6\",\"#1089E7\", \"#F57474\", \"#56D0E3\", \"#F8B448\"];\r\n");
      out.write("    \t  // 1. 实例化对象\r\n");
      out.write("    \t  var myChart = echarts.init(document.querySelector(\".zzchart2\"));\r\n");
      out.write("    \t \r\n");
      out.write("    \t   // 2. 指定配置和数据\r\n");
      out.write("  var option = {\r\n");
      out.write("    grid: {\r\n");
      out.write("      top: \"10%\",\r\n");
      out.write("      left: \"45%\",\r\n");
      out.write("      bottom: \"10%\"\r\n");
      out.write("      // containLabel: true\r\n");
      out.write("    },\r\n");
      out.write("    // 不显示x轴的相关信息\r\n");
      out.write("    xAxis: {\r\n");
      out.write("      show: false\r\n");
      out.write("    },\r\n");
      out.write("    yAxis: [\r\n");
      out.write("      {\r\n");
      out.write("        type: \"category\",\r\n");
      out.write("        inverse: true,\r\n");
      out.write("        data: [],\r\n");
      out.write("        // 不显示y轴的线\r\n");
      out.write("        axisLine: {\r\n");
      out.write("          show: false\r\n");
      out.write("        },\r\n");
      out.write("        // 不显示刻度\r\n");
      out.write("       axisTick: {\r\n");
      out.write("          show: false\r\n");
      out.write("        },\r\n");
      out.write("        // 把刻度标签里面的文字颜色设置为白色\r\n");
      out.write("        axisLabel: {\r\n");
      out.write("          color: \"#fff\"\r\n");
      out.write("        }\r\n");
      out.write("      },\r\n");
      out.write("      {\r\n");
      out.write("        data: [],\r\n");
      out.write("        inverse: true,\r\n");
      out.write("        // 不显示y轴的线\r\n");
      out.write("        axisLine: {\r\n");
      out.write("          show: false\r\n");
      out.write("        },\r\n");
      out.write("        // 不显示刻度\r\n");
      out.write("        axisTick: {\r\n");
      out.write("          show: false\r\n");
      out.write("        },\r\n");
      out.write("        // 把刻度标签里面的文字颜色设置为白色\r\n");
      out.write("        axisLabel: {\r\n");
      out.write("          color: \"#fff\"\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("    ]\r\n");
      out.write("   \r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("    \t  // 3. 把配置给实例对象\r\n");
      out.write("    \t  myChart.setOption(option);\r\n");
      out.write("    \t window.addEventListener(\"resize\", function() {\r\n");
      out.write("    \t    myChart.resize();\r\n");
      out.write("    \t  });\r\n");
      out.write("    \t myChart.showLoading();\r\n");
      out.write("    \t var names=[];\r\n");
      out.write("    \t var nums=[];\r\n");
      out.write("    \t $.ajax({\r\n");
      out.write("    \t\t type:\"post\",\r\n");
      out.write("    \t \tasync:true,\r\n");
      out.write("    \t \turl:\"repurchaserate.do\",\r\n");
      out.write("    \t \tdata:{},\r\n");
      out.write("    \t \tdataType:\"json\",\r\n");
      out.write("    \t \tsuccess:function(result){\r\n");
      out.write("    \t \t\tif(result){\r\n");
      out.write("    \t \t\t\tfor(var i=0;i<9;i++){\r\n");
      out.write("    \t \t\t\t\tnames.push(result[i].name);\r\n");
      out.write("    \t \t\t\t}\r\n");
      out.write("    \t \t\t\tfor(var i=0;i<9;i++){\r\n");
      out.write("    \t \t\t\t\t\r\n");
      out.write("    \t \t\t\t\tnums.push((Number(result[i].repurchaserate)*100));\r\n");
      out.write("    \t \t\t\t}\r\n");
      out.write("    \t \t\t\tmyChart.hideLoading();\r\n");
      out.write("    \t \t\t\tmyChart.setOption({\r\n");
      out.write("    \t \t\t\t\tyAxis:{data:names},\r\n");
      out.write("    \t \t\t\t\t series: [\r\n");
      out.write("    \t \t\t\t\t      {\r\n");
      out.write("    \t \t\t\t\t        name: \"条\",\r\n");
      out.write("    \t \t\t\t\t        type: \"bar\",\r\n");
      out.write("    \t \t\t\t\t        data:nums,\r\n");
      out.write("    \t \t\t\t\t        yAxisIndex: 0,\r\n");
      out.write("    \t \t\t\t\t        // 修改第一组柱子的圆角\r\n");
      out.write("    \t \t\t\t\t        itemStyle: {\r\n");
      out.write("    \t \t\t\t\t          barBorderRadius: 20,\r\n");
      out.write("    \t \t\t\t\t          // 此时的color 可以修改柱子的颜色\r\n");
      out.write("    \t \t\t\t\t          color: function(params) {\r\n");
      out.write("    \t \t\t\t\t            // params 传进来的是柱子对象\r\n");
      out.write("    \t \t\t\t\t            // console.log(params);\r\n");
      out.write("    \t \t\t\t\t            // dataIndex 是当前柱子的索引号\r\n");
      out.write("    \t \t\t\t\t            return myColor[params.dataIndex];\r\n");
      out.write("    \t \t\t\t\t          }\r\n");
      out.write("    \t \t\t\t\t        },\r\n");
      out.write("    \t \t\t\t\t        // 柱子之间的距离\r\n");
      out.write("    \t \t\t\t\t        barCategoryGap: 50,\r\n");
      out.write("    \t \t\t\t\t        //柱子的宽度\r\n");
      out.write("    \t \t\t\t\t        barWidth: 10,\r\n");
      out.write("    \t \t\t\t\t        // 显示柱子内的文字\r\n");
      out.write("    \t \t\t\t\t        label: {\r\n");
      out.write("    \t \t\t\t\t          show: true,\r\n");
      out.write("    \t \t\t\t\t          position: \"inside\",\r\n");
      out.write("    \t \t\t\t\t          // {c} 会自动的解析为 数据  data里面的数据\r\n");
      out.write("    \t \t\t\t\t          formatter: \"{c}%\"\r\n");
      out.write("    \t \t\t\t\t        }\r\n");
      out.write("    \t \t\t\t\t      },\r\n");
      out.write("    \t \t\t\t\t      {\r\n");
      out.write("    \t \t\t\t\t        name: \"框\",\r\n");
      out.write("    \t \t\t\t\t        type: \"bar\",\r\n");
      out.write("    \t \t\t\t\t        barCategoryGap: 50,\r\n");
      out.write("    \t \t\t\t\t        barWidth: 15,\r\n");
      out.write("    \t \t\t\t\t        yAxisIndex: 1,\r\n");
      out.write("    \t \t\t\t\t        data: [100, 100, 100, 100, 100,100,100,100,100],\r\n");
      out.write("    \t \t\t\t\t        itemStyle: {\r\n");
      out.write("    \t \t\t\t\t          color: \"none\",\r\n");
      out.write("    \t \t\t\t\t          borderColor: \"#00c1de\",\r\n");
      out.write("    \t \t\t\t\t          borderWidth: 3,\r\n");
      out.write("    \t \t\t\t\t          barBorderRadius: 15\r\n");
      out.write("    \t \t\t\t\t        }\r\n");
      out.write("    \t \t\t\t\t      }\r\n");
      out.write("    \t \t\t\t\t    ]\r\n");
      out.write("    \t \t\t\t})\r\n");
      out.write("    \t \t\t}\t\r\n");
      out.write("    \t \t},\r\n");
      out.write("    \t\terror:function(errorMsg){\r\n");
      out.write("    \t\t\talert(\"图表数据请求失败！\");\r\n");
      out.write("    \t\t\tmyChart.hideLoading();\r\n");
      out.write("    \t\t}\t \r\n");
      out.write("    \t })\r\n");
      out.write("    \t};\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\r\n");
      out.write("    \t\r\n");
      out.write("    \t\r\n");
      out.write("    \t\r\n");
      out.write("    \t<script>\r\n");
      out.write("    \t// 折线图1模块制作\r\n");
      out.write("    \tfunction zxchart() {\r\n");
      out.write("    \t  var yearData = [\r\n");
      out.write("    \t    {\r\n");
      out.write("    \t      year: \"2020\", // 年份\r\n");
      out.write("    \t      data: [\r\n");
      out.write("    \t        // 两个数组是因为有两条线\r\n");
      out.write("    \t        [1000, 2000, 5000, 7500, 10000, 12500, 9000, 10100, 14200, 17500, 20000, 22500],\r\n");
      out.write("    \t        [1750, 3750, 6500, 10000, 17500, 16500, 15500, 18000, 20000, 22500, 22500, 37500]\r\n");
      out.write("    \t      ]\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    {\r\n");
      out.write("    \t      year: \"2021\", // 年份\r\n");
      out.write("    \t      data: [\r\n");
      out.write("    \t        // 两个数组是因为有两条线\r\n");
      out.write("    \t        [20000, 25000, 10000, 12500,17500 , , , , , , , ],\r\n");
      out.write("    \t        [60000, 55000, 40000, 32500, 35200, , , , , , , ]\r\n");
      out.write("    \t      ]\r\n");
      out.write("    \t    }\r\n");
      out.write("    \t  ];\r\n");
      out.write("    \t  // 1. 实例化对象\r\n");
      out.write("    \t  var myChart = echarts.init(document.querySelector(\".zxchart\"));\r\n");
      out.write("    \t  // 2.指定配置\r\n");
      out.write("    \t  var option = {\r\n");
      out.write("    \t    // 通过这个color修改两条线的颜色\r\n");
      out.write("    \t    color: [\"#00f2f1\", \"#ed3f35\"],\r\n");
      out.write("    \t    tooltip: {\r\n");
      out.write("    \t      trigger: \"axis\"\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    legend: {\r\n");
      out.write("    \t      // 如果series 对象有name 值，则 legend可以不用写data\r\n");
      out.write("    \t      // 修改图例组件 文字颜色\r\n");
      out.write("    \t      textStyle: {\r\n");
      out.write("    \t        color: \"#4c9bfd\"\r\n");
      out.write("    \t      },\r\n");
      out.write("    \t      // 这个10% 必须加引号\r\n");
      out.write("    \t      right: \"10%\"\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    grid: {\r\n");
      out.write("    \t      top: \"20%\",\r\n");
      out.write("    \t      left: \"3%\",\r\n");
      out.write("    \t      right: \"4%\",\r\n");
      out.write("    \t      bottom: \"3%\",\r\n");
      out.write("    \t      show: true, // 显示边框\r\n");
      out.write("    \t      borderColor: \"#012f4a\", // 边框颜色\r\n");
      out.write("    \t      containLabel: true // 包含刻度文字在内\r\n");
      out.write("    \t    },\r\n");
      out.write("\r\n");
      out.write("    \t    xAxis: {\r\n");
      out.write("    \t      type: \"category\",\r\n");
      out.write("    \t      boundaryGap: false,\r\n");
      out.write("    \t      data: [\r\n");
      out.write("    \t        \"1月\",\r\n");
      out.write("    \t        \"2月\",\r\n");
      out.write("    \t        \"3月\",\r\n");
      out.write("    \t        \"4月\",\r\n");
      out.write("    \t        \"5月\",\r\n");
      out.write("    \t        \"6月\",\r\n");
      out.write("    \t        \"7月\",\r\n");
      out.write("    \t        \"8月\",\r\n");
      out.write("    \t        \"9月\",\r\n");
      out.write("    \t        \"10月\",\r\n");
      out.write("    \t        \"11月\",\r\n");
      out.write("    \t        \"12月\"\r\n");
      out.write("    \t      ],\r\n");
      out.write("    \t      axisTick: {\r\n");
      out.write("    \t        show: false // 去除刻度线\r\n");
      out.write("    \t      },\r\n");
      out.write("    \t      axisLabel: {\r\n");
      out.write("    \t        color: \"#4c9bfd\" // 文本颜色\r\n");
      out.write("    \t      },\r\n");
      out.write("    \t      axisLine: {\r\n");
      out.write("    \t        show: false // 去除轴线\r\n");
      out.write("    \t      }\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    yAxis: {\r\n");
      out.write("    \t      type: \"value\",\r\n");
      out.write("    \t      axisTick: {\r\n");
      out.write("    \t        show: false // 去除刻度线\r\n");
      out.write("    \t      },\r\n");
      out.write("    \t      axisLabel: {\r\n");
      out.write("    \t        color: \"#4c9bfd\" // 文本颜色\r\n");
      out.write("    \t      },\r\n");
      out.write("    \t      axisLine: {\r\n");
      out.write("    \t        show: false // 去除轴线\r\n");
      out.write("    \t      },\r\n");
      out.write("    \t      splitLine: {\r\n");
      out.write("    \t        lineStyle: {\r\n");
      out.write("    \t          color: \"#012f4a\" // 分割线颜色\r\n");
      out.write("    \t        }\r\n");
      out.write("    \t      }\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    series: [\r\n");
      out.write("    \t      {\r\n");
      out.write("    \t        name: \"蒙牛特仑苏低脂牛奶\",\r\n");
      out.write("    \t        type: \"line\",\r\n");
      out.write("    \t        // true 可以让我们的折线显示带有弧度\r\n");
      out.write("    \t        smooth: true,\r\n");
      out.write("    \t        data: yearData[0].data[0]\r\n");
      out.write("    \t      },\r\n");
      out.write("    \t      {\r\n");
      out.write("    \t        name: \"伊利金典有机纯牛奶\",\r\n");
      out.write("    \t        type: \"line\",\r\n");
      out.write("    \t        smooth: true,\r\n");
      out.write("    \t        data: yearData[0].data[1]\r\n");
      out.write("    \t      }\r\n");
      out.write("    \t    ]\r\n");
      out.write("    \t  };\r\n");
      out.write("\r\n");
      out.write("    \t  // 3. 把配置给实例对象\r\n");
      out.write("    \t  myChart.setOption(option);\r\n");
      out.write("    \t  // 4. 让图表跟随屏幕自动的去适应\r\n");
      out.write("    \t  window.addEventListener(\"resize\", function() {\r\n");
      out.write("    \t    myChart.resize();\r\n");
      out.write("    \t  });\r\n");
      out.write("\r\n");
      out.write("    \t  // 5.点击切换效果\r\n");
      out.write("    \t  $(\"h2\").on(\"click\", \"a\", function() {\r\n");
      out.write("    \t    // alert(1);\r\n");
      out.write("    \t    // console.log($(this).index());\r\n");
      out.write("    \t    // 点击 a 之后 根据当前a的索引号 找到对应的 yearData的相关对象\r\n");
      out.write("    \t    // console.log(yearData[$(this).index()]);\r\n");
      out.write("    \t    var obj = yearData[$(this).index()];\r\n");
      out.write("    \t    option.series[0].data = obj.data[0];\r\n");
      out.write("    \t    option.series[1].data = obj.data[1];\r\n");
      out.write("    \t    // 需要重新渲染\r\n");
      out.write("    \t    myChart.setOption(option);\r\n");
      out.write("    \t window.addEventListener(\"resize\", function() {\r\n");
      out.write("    \t    myChart.resize();\r\n");
      out.write("    \t  });\r\n");
      out.write("    \t  });\r\n");
      out.write("    \t};\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \t\r\n");
      out.write("    <script>\r\n");
      out.write("    \t// 饼形图2 地区分布模块\r\n");
      out.write("    \tfunction bxchart() {\r\n");
      out.write("    \t  var myChart = echarts.init(document.querySelector(\".bxchart\"));\r\n");
      out.write("    \t  var option = {\r\n");
      out.write("    \t    color: [\r\n");
      out.write("    \t      \"#006cff\",\r\n");
      out.write("    \t      \"#60cda0\",\r\n");
      out.write("    \t      \"#ed8884\",\r\n");
      out.write("    \t      \"#ff9f7f\",\r\n");
      out.write("    \t      \"#0096ff\",\r\n");
      out.write("    \t      \"#9fe6b8\",\r\n");
      out.write("    \t      \"#32c5e9\",\r\n");
      out.write("    \t      \"#1d9dff\",\r\n");
      out.write("    \t      \"#0058ff\"\r\n");
      out.write("    \t    ],\r\n");
      out.write("    \t    tooltip: {\r\n");
      out.write("    \t      trigger: \"item\",\r\n");
      out.write("    \t      formatter: \"{a} <br/>{b} : {c} ({d}%)\"\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    legend: {\r\n");
      out.write("    \t      bottom: \"0%\",\r\n");
      out.write("    \t      itemWidth: 10,\r\n");
      out.write("    \t      itemHeight: 10,\r\n");
      out.write("    \t      textStyle: {\r\n");
      out.write("    \t        color: \"rgba(255,255,255,.5)\",\r\n");
      out.write("    \t        fontSize: \"12\"\r\n");
      out.write("    \t      }\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    series: [\r\n");
      out.write("    \t      {\r\n");
      out.write("    \t        name: \"聚划算占比\",\r\n");
      out.write("    \t        type: \"pie\",\r\n");
      out.write("    \t        radius: [\"10%\", \"70%\"],\r\n");
      out.write("    \t        center: [\"50%\", \"50%\"],\r\n");
      out.write("    \t        roseType: \"radius\",\r\n");
      out.write("    \t        // 图形的文字标签\r\n");
      out.write("    \t        label: {\r\n");
      out.write("    \t          fontSize: 10\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        // 链接图形和文字的线条\r\n");
      out.write("    \t        labelLine: {\r\n");
      out.write("    \t          // length 链接图形的线条\r\n");
      out.write("    \t          length: 6,\r\n");
      out.write("    \t          // length2 链接文字的线条\r\n");
      out.write("    \t          length2: 8\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        data: []\r\n");
      out.write("    \t      }\r\n");
      out.write("    \t    ]\r\n");
      out.write("    \t  };\r\n");
      out.write("    \t  myChart.setOption(option);\r\n");
      out.write("    \t window.addEventListener(\"resize\", function() {\r\n");
      out.write("    \t    myChart.resize();\r\n");
      out.write("    \t  });\r\n");
      out.write("    \t myChart.showLoading();\r\n");
      out.write("    \t var nums=[];\r\n");
      out.write("    \t $.ajax({\r\n");
      out.write("    \t\t type:\"post\",\r\n");
      out.write("    \t \tasync:true,\r\n");
      out.write("    \t \turl:\"jhspricenumber.do\",\r\n");
      out.write("    \t \tdata:{},\r\n");
      out.write("    \t \tdataType:\"json\",\r\n");
      out.write("    \t \tsuccess:function(result){\r\n");
      out.write("    \t \t\tif(result){\r\n");
      out.write("    \t \t\t\tvar jhssum=0;\r\n");
      out.write("    \t \t\t\tfor(var i=0;i<9;i++){\r\n");
      out.write("    \t \t\t\t\tjhssum=jhssum+result[i].jhsprice_number;\r\n");
      out.write("    \t \t\t\t\t\r\n");
      out.write("    \t \t\t\t}\r\n");
      out.write("    \t \t\t\tvar sum=parseFloat(jhssum);\r\n");
      out.write("    \t \t\t\tfor(var i=0;i<9;i++){\r\n");
      out.write("    \t \t\t\t\tnums.push({value:result[i].jhsprice_number,name:result[i].name});\r\n");
      out.write("    \t \t\t\t\tconsole.log(Math.round(parseFloat(result[i].jhsprice_number)/sum*100));\r\n");
      out.write("    \t \t\t\t}\r\n");
      out.write("    \t \t\t\tmyChart.hideLoading();\r\n");
      out.write("    \t \t\t\tmyChart.setOption({\r\n");
      out.write("    \t \t\t\t\tseries:[{\r\n");
      out.write("    \t \t\t\t\t\tdata:nums\r\n");
      out.write("    \t \t\t\t\t}]\r\n");
      out.write("    \t \t\t\t})\r\n");
      out.write("    \t \t\t}\t\r\n");
      out.write("    \t \t},\r\n");
      out.write("    \t\terror:function(errorMsg){\r\n");
      out.write("    \t\t\talert(\"图表数据请求失败！\");\r\n");
      out.write("    \t\t\tmyChart.hideLoading();\r\n");
      out.write("    \t\t}\t \r\n");
      out.write("    \t })\r\n");
      out.write("    \t};\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <script >  //积分表模块\r\n");
      out.write("    function  jifenbiao(){\r\n");
      out.write("    \tvar myChart = echarts.init(document.getElementById('jifenbiao'));\r\n");
      out.write("    \tvar option = {\r\n");
      out.write("    \t    xAxis: {\r\n");
      out.write("    \t        splitLine: {\r\n");
      out.write("    \t            show: false\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        axisLabel: {\r\n");
      out.write("    \t            show: false\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        axisLine: {\r\n");
      out.write("    \t            show: false\r\n");
      out.write("    \t        }\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    yAxis: {\r\n");
      out.write("    \t        splitLine: {\r\n");
      out.write("    \t            show: false\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        axisLabel: {\r\n");
      out.write("    \t            show: false\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        axisLine: {\r\n");
      out.write("    \t            show: false\r\n");
      out.write("    \t        }\r\n");
      out.write("    \t    },\r\n");
      out.write("    \t    series: [\r\n");
      out.write("    \t        // 内圆\r\n");
      out.write("    \t        {\r\n");
      out.write("    \t            type: 'pie',\r\n");
      out.write("    \t            radius: ['0', '25%'],\r\n");
      out.write("    \t            center: ['50%', '50%'],\r\n");
      out.write("    \t            z: 4,\r\n");
      out.write("    \t            hoverAnimation: false,\r\n");
      out.write("    \t            data: [{\r\n");
      out.write("    \t                name: '积分',\r\n");
      out.write("    \t                value: 1,\r\n");
      out.write("    \t                itemStyle: {\r\n");
      out.write("    \t                    normal: {\r\n");
      out.write("    \t                        color: new echarts.graphic.LinearGradient(0, 1, 0, 0, [{\r\n");
      out.write("    \t                            offset: 0,\r\n");
      out.write("    \t                            color: '#ffeb7b'\r\n");
      out.write("    \t                        }, {\r\n");
      out.write("    \t                            offset: 1,\r\n");
      out.write("    \t                            color: '#ffeb7b'\r\n");
      out.write("    \t                        }])\r\n");
      out.write("    \t                    }\r\n");
      out.write("\r\n");
      out.write("    \t                },\r\n");
      out.write("    \t                label: {\r\n");
      out.write("    \t                    normal: {\r\n");
      out.write("    \t                        rich: {\r\n");
      out.write("    \t                            a: {\r\n");
      out.write("    \t                                color: '#994D01',\r\n");
      out.write("    \t                                align: 'center',\r\n");
      out.write("    \t                                fontSize: 30,\r\n");
      out.write("    \t                                padding: [0,0,56,0],\r\n");
      out.write("    \t                                fontWeight: \"bold\"\r\n");
      out.write("    \t                            },\r\n");
      out.write("    \t                            b: {\r\n");
      out.write("    \t                                color: '#AF6E2F',\r\n");
      out.write("    \t                                align: 'center',\r\n");
      out.write("    \t                                fontSize: 16,\r\n");
      out.write("    \t                                fontWeight: \"bold\"\r\n");
      out.write("    \t                            }\r\n");
      out.write("    \t                        },\r\n");
      out.write("    \t                        formatter: function(params) {\r\n");
      out.write("    \t                            return \"{a|\" + params.value + \"}\\n\\n\" + \"{b|\" + \"天猫超市\" + \"}\";\r\n");
      out.write("    \t                        },\r\n");
      out.write("    \t                        position: 'center',\r\n");
      out.write("    \t                        show: true\r\n");
      out.write("    \t                    }\r\n");
      out.write("    \t                },\r\n");
      out.write("    \t                labelLine: {\r\n");
      out.write("    \t                    show: false\r\n");
      out.write("    \t                }\r\n");
      out.write("    \t            }],\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        //进度图\r\n");
      out.write("    \t        {\r\n");
      out.write("    \t            type: 'gauge',\r\n");
      out.write("    \t            radius: '55%',\r\n");
      out.write("    \t            center: ['50%', '50%'],\r\n");
      out.write("    \t            min: 0,\r\n");
      out.write("    \t            max: 1000,\r\n");
      out.write("    \t            z: 5,\r\n");
      out.write("    \t            splitNumber: 1, //刻度数量\r\n");
      out.write("    \t            startAngle: 220,\r\n");
      out.write("    \t            endAngle: -40,\r\n");
      out.write("    \t            animation: true,\r\n");
      out.write("    \t            animationDuration: 10000,\r\n");
      out.write("    \t            //分隔线样式。\r\n");
      out.write("    \t            splitLine: {\r\n");
      out.write("    \t                show: false,\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            axisTick: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            title: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            axisLabel: {\r\n");
      out.write("    \t                color: 'rgba(255,255,255,0)',\r\n");
      out.write("    \t                fontSize: 12,\r\n");
      out.write("    \t            }, //刻度节点文字颜色\r\n");
      out.write("    \t            detail: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            axisLine: {\r\n");
      out.write("    \t                show: true,\r\n");
      out.write("    \t                lineStyle: {\r\n");
      out.write("    \t                    width: 20,\r\n");
      out.write("    \t                    color: [\r\n");
      out.write("    \t                        [\r\n");
      out.write("    \t                            0.02, new echarts.graphic.LinearGradient(\r\n");
      out.write("    \t                                0, 0, 1, 0, [{\r\n");
      out.write("    \t                                        offset: 0,\r\n");
      out.write("    \t                                        color: '#F08E25'\r\n");
      out.write("    \t                                    }, {\r\n");
      out.write("    \t                                        offset: 0.5,\r\n");
      out.write("    \t                                        color: '#F8B840'\r\n");
      out.write("    \t                                    },\r\n");
      out.write("    \t                                    {\r\n");
      out.write("    \t                                        offset: 1,\r\n");
      out.write("    \t                                        color: '#F6EC4F'\r\n");
      out.write("    \t                                    }\r\n");
      out.write("    \t                                ]\r\n");
      out.write("    \t                            )\r\n");
      out.write("    \t                        ],\r\n");
      out.write("    \t                        [\r\n");
      out.write("    \t                            1, new echarts.graphic.LinearGradient(\r\n");
      out.write("    \t                                0, 0, 1, 0, [{\r\n");
      out.write("    \t                                        offset: 0,\r\n");
      out.write("    \t                                        color: 'rgba(255,255,255, 0.3)'\r\n");
      out.write("    \t                                    }, {\r\n");
      out.write("    \t                                        offset: 0.5,\r\n");
      out.write("    \t                                        color: 'rgba(255,255,255, 0.2)'\r\n");
      out.write("    \t                                    },\r\n");
      out.write("    \t                                    {\r\n");
      out.write("    \t                                        offset: 1,\r\n");
      out.write("    \t                                        color: 'rgba(255,255,255, 0.1)'\r\n");
      out.write("    \t                                    }\r\n");
      out.write("    \t                                ]\r\n");
      out.write("    \t                            )\r\n");
      out.write("    \t                        ]\r\n");
      out.write("    \t                    ]\r\n");
      out.write("    \t                }\r\n");
      out.write("    \t            }\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        //刻度尺\r\n");
      out.write("    \t        {\r\n");
      out.write("    \t            type: \"gauge\",\r\n");
      out.write("    \t            radius: \"56%\",\r\n");
      out.write("    \t            startAngle: 220,\r\n");
      out.write("    \t            endAngle: -40,\r\n");
      out.write("    \t            z: 2,\r\n");
      out.write("    \t            axisTick: {\r\n");
      out.write("    \t                show: true,\r\n");
      out.write("    \t                lineStyle: {\r\n");
      out.write("    \t                    color: '#fff',\r\n");
      out.write("    \t                    width: 1\r\n");
      out.write("    \t                },\r\n");
      out.write("    \t                length: -8\r\n");
      out.write("    \t            }, //刻度样式\r\n");
      out.write("    \t            splitLine: {\r\n");
      out.write("    \t                show: true,\r\n");
      out.write("    \t                lineStyle: {\r\n");
      out.write("    \t                    color: '#fff',\r\n");
      out.write("    \t                    width: 1\r\n");
      out.write("    \t                },\r\n");
      out.write("    \t                length: -8\r\n");
      out.write("    \t            }, //分隔线样式\r\n");
      out.write("    \t            axisLabel: {\r\n");
      out.write("    \t                color: 'rgba(255,255,255,0)',\r\n");
      out.write("    \t                fontSize: 12,\r\n");
      out.write("    \t            }, //刻度节点文字颜色\r\n");
      out.write("    \t            pointer: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            axisLine: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            label: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            //仪表盘详情，用于显示数据。\r\n");
      out.write("    \t            detail: {\r\n");
      out.write("    \t                show: true,\r\n");
      out.write("    \t                offsetCenter: [8, '98%'],\r\n");
      out.write("    \t                color: '#fff',\r\n");
      out.write("    \t                formatter: function(params) {\r\n");
      out.write("    \t                    return '- 销量遥遥领先-'\r\n");
      out.write("    \t                },\r\n");
      out.write("    \t                textStyle: {\r\n");
      out.write("    \t                    fontSize: 20\r\n");
      out.write("    \t                }\r\n");
      out.write("    \t            }\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        // 外一层圈\r\n");
      out.write("    \t        {\r\n");
      out.write("    \t            type: \"pie\",\r\n");
      out.write("    \t            radius: \"30%\",\r\n");
      out.write("    \t            startAngle: 220,\r\n");
      out.write("    \t            endAngle: -40,\r\n");
      out.write("    \t            hoverAnimation: false,\r\n");
      out.write("    \t            center: [\"50%\", \"50%\"],\r\n");
      out.write("    \t            avoidLabelOverlap: false,\r\n");
      out.write("    \t            label: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            labelLine: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            data: [{\r\n");
      out.write("    \t                value: 1\r\n");
      out.write("    \t            }],\r\n");
      out.write("    \t            itemStyle: {\r\n");
      out.write("    \t                normal: {\r\n");
      out.write("    \t                    color: {\r\n");
      out.write("    \t                        type: \"linear\",\r\n");
      out.write("    \t                        x: 0,\r\n");
      out.write("    \t                        y: 0,\r\n");
      out.write("    \t                        x2: 0,\r\n");
      out.write("    \t                        y2: 1,\r\n");
      out.write("    \t                        colorStops: [{\r\n");
      out.write("    \t                            offset: 0,\r\n");
      out.write("    \t                            color: \"#FDE35A\"\r\n");
      out.write("    \t                        }, {\r\n");
      out.write("    \t                            offset: 1,\r\n");
      out.write("    \t                            color: \"#F28930\"\r\n");
      out.write("    \t                        }]\r\n");
      out.write("    \t                    }\r\n");
      out.write("    \t                }\r\n");
      out.write("    \t            }\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        //外二层圈\r\n");
      out.write("    \t        {\r\n");
      out.write("    \t            type: \"pie\",\r\n");
      out.write("    \t            radius: \"35%\",\r\n");
      out.write("    \t            center: [\"50%\", \"50%\"],\r\n");
      out.write("    \t            avoidLabelOverlap: false,\r\n");
      out.write("    \t            z: 0,\r\n");
      out.write("    \t            hoverAnimation: false,\r\n");
      out.write("    \t            label: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            labelLine: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            data: [{\r\n");
      out.write("    \t                \"value\": 1\r\n");
      out.write("    \t            }],\r\n");
      out.write("    \t            itemStyle: {\r\n");
      out.write("    \t                normal: {\r\n");
      out.write("    \t                    color: {\r\n");
      out.write("    \t                        type: \"linear\",\r\n");
      out.write("    \t                        x: 0,\r\n");
      out.write("    \t                        y: 0,\r\n");
      out.write("    \t                        x2: 0,\r\n");
      out.write("    \t                        y2: 1,\r\n");
      out.write("    \t                        colorStops: [{\r\n");
      out.write("    \t                            offset: 0,\r\n");
      out.write("    \t                            color: \"rgba(253, 227, 90, 0.25)\"\r\n");
      out.write("    \t                        }, {\r\n");
      out.write("    \t                            offset: 1,\r\n");
      out.write("    \t                            color: \"rgba(253, 227, 90, 0)\"\r\n");
      out.write("    \t                        }]\r\n");
      out.write("    \t                    }\r\n");
      out.write("    \t                }\r\n");
      out.write("    \t            }\r\n");
      out.write("    \t        },\r\n");
      out.write("    \t        //最外层圈\r\n");
      out.write("    \t        {\r\n");
      out.write("    \t            type: \"pie\",\r\n");
      out.write("\r\n");
      out.write("    \t            radius: \"40%\",\r\n");
      out.write("    \t            center: [\"50%\", \"50%\"],\r\n");
      out.write("    \t            avoidLabelOverlap: false,\r\n");
      out.write("    \t            z: 0,\r\n");
      out.write("    \t            hoverAnimation: false,\r\n");
      out.write("    \t            label: {\r\n");
      out.write("    \t                show: false,\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            labelLine: {\r\n");
      out.write("    \t                show: false\r\n");
      out.write("    \t            },\r\n");
      out.write("    \t            data: [{\r\n");
      out.write("    \t                value: 1\r\n");
      out.write("    \t            }],\r\n");
      out.write("    \t            itemStyle: {\r\n");
      out.write("    \t                normal: {\r\n");
      out.write("    \t                    color: {\r\n");
      out.write("    \t                        type: \"linear\",\r\n");
      out.write("    \t                        x: 0,\r\n");
      out.write("    \t                        y: 0,\r\n");
      out.write("    \t                        x2: 0,\r\n");
      out.write("    \t                        y2: 1,\r\n");
      out.write("    \t                        colorStops: [{\r\n");
      out.write("    \t                                offset: 0,\r\n");
      out.write("    \t                                color: \"rgba(253, 227, 90, 0.2)\"\r\n");
      out.write("    \t                            },\r\n");
      out.write("    \t                            {\r\n");
      out.write("    \t                                offset: 1,\r\n");
      out.write("    \t                                color: \"rgba(249, 137, 27, 0)\"\r\n");
      out.write("    \t                            }\r\n");
      out.write("    \t                        ]\r\n");
      out.write("    \t                    }\r\n");
      out.write("    \t                }\r\n");
      out.write("    \t            }\r\n");
      out.write("    \t        }\r\n");
      out.write("    \t    ]\r\n");
      out.write("    \t}\r\n");
      out.write("    \tmyChart.setOption(option) ;\r\n");
      out.write("    \t}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   <script >//详细数据模块\r\n");
      out.write("   function detail(){\r\n");
      out.write("\t   var myChart2 = echarts.init(document.getElementById('detail'));\r\n");
      out.write("\t   var links = []\r\n");
      out.write("\t   // =======================\r\n");
      out.write("\t   // 人员信息数据\r\n");
      out.write("\t   \r\n");
      out.write("\t   // =======================\r\n");
      out.write("\t   // 人员关系数据\r\n");
      out.write("\t   var nodes=[]\r\n");
      out.write("\t   var infos = {};\r\n");
      out.write("\t   var legend = new Set()\r\n");
      out.write("\t   echar_data = []\r\n");
      out.write("\t   echar_links = []\r\n");
      out.write("\t   myChart2.showLoading();\r\n");
      out.write("    \t\r\n");
      out.write("    \t $.ajax({\r\n");
      out.write("    \t\t type:\"post\",\r\n");
      out.write("    \t \tasync:true,\r\n");
      out.write("    \t \turl:\"commoditydetail.do\",\r\n");
      out.write("    \t \tdata:{},\r\n");
      out.write("    \t \tdataType:\"json\",\r\n");
      out.write("    \t \tsuccess:function(result){\r\n");
      out.write("    \t \t\tif(result){\r\n");
      out.write("    \t \t\t\tfor(var i=0;i<9;i++){\r\n");
      out.write("    \t \t\t\t\tlinks.push({source:result[i].name,target:result[(i+1)%9].name,value:''});\r\n");
      out.write("    \t \t\t\t}\r\n");
      out.write("    \t \t\t\tfor(var i=0;i<9;i++){\r\n");
      out.write("    \t \t\t\t\tnodes.push({\r\n");
      out.write("    \t \t\t           '类别':result[i].name,\r\n");
      out.write("    \t \t\t           '库存':result[i].stock,\r\n");
      out.write("    \t \t\t           '保质期':result[i].baozhidate ,\r\n");
      out.write("    \t \t\t          '评论数': result[i].commentamount,\r\n");
      out.write("    \t \t\t         '配料': result[i].material,\r\n");
      out.write("    \t \t\t      });\t\r\n");
      out.write("    \t \t\t\t\t\r\n");
      out.write("    \t \t\t\t}\r\n");
      out.write("    \t \t\t\tfor (var node of nodes){\r\n");
      out.write("    \t \t\t\t\t  \r\n");
      out.write("    \t \t\t       if(node['类别'] in infos){\r\n");
      out.write("    \t \t\t           window.alert('类别重复，请修改: ' + node['类别'])\r\n");
      out.write("    \t \t\t       }\r\n");
      out.write("    \t \t\t       \r\n");
      out.write("    \t \t\t       infos[node['类别']] = Object.assign({}, node);\r\n");
      out.write("    \t \t\t       \r\n");
      out.write("    \t \t\t   }\r\n");
      out.write("    \t \t\t   // 检查边的links的姓名是否都出现在nodes中\r\n");
      out.write("    \t \t\t   for(var link of links){\r\n");
      out.write("    \t \t\t       if( !( (link.source in infos) && (link.target in infos) ) ){\r\n");
      out.write("    \t \t\t           window.alert('类别未出现导致边非法:' + link)\r\n");
      out.write("    \t \t\t       }\r\n");
      out.write("    \t \t\t       \r\n");
      out.write("    \t \t\t   }\r\n");
      out.write("    \t \t\t  for (var node of nodes){\r\n");
      out.write("    \t \t\t       legend.add(node['类别']);\r\n");
      out.write("    \t \t\t   }\r\n");
      out.write("    \t \t\t   legend = Array.from(legend);\r\n");
      out.write("    \t \t\t   legend.sort(); \r\n");
      out.write("\r\n");
      out.write("    \t \t\t  \r\n");
      out.write("    \t \t\t   for (var node of nodes){\r\n");
      out.write("    \t \t\t\t  console.log(node);\r\n");
      out.write("    \t \t\t       echar_data.push({\r\n");
      out.write("    \t \t\t                   name: node['类别'],\r\n");
      out.write("    \t \t\t                   category:  legend.findIndex((element) => element == node['类别']),\r\n");
      out.write("    \t \t\t                   draggable: true,\r\n");
      out.write("    \t \t\t               })\r\n");
      out.write("    \t \t\t   }\r\n");
      out.write("\r\n");
      out.write("    \t \t\t  \r\n");
      out.write("    \t \t\t   for(var link of links){\r\n");
      out.write("    \t \t\t\t  \r\n");
      out.write("    \t \t\t       echar_links.push({\r\n");
      out.write("    \t \t\t                   source: link.source,\r\n");
      out.write("    \t \t\t                   target: link.target,\r\n");
      out.write("    \t \t\t                   value: link.value\r\n");
      out.write("    \t \t\t               })\r\n");
      out.write("    \t \t\t               \r\n");
      out.write("    \t \t\t   } \r\n");
      out.write("    \t \t\t\tmyChart2.hideLoading();\r\n");
      out.write("    \t \t\t\toption2 = {\r\n");
      out.write("    \t \t\t\t       title: {\r\n");
      out.write("    \t \t\t\t           text: '商品详细信息',\r\n");
      out.write("    \t \t\t\t          textStyle: {\r\n");
      out.write("    \t \t\t\t               color: \"#ffeb7b\"\r\n");
      out.write("    \t \t\t\t           } \r\n");
      out.write("    \t \t\t\t       },\r\n");
      out.write("    \t \t\t\t       tooltip: {\r\n");
      out.write("    \t \t\t\t           trigger: 'item',\r\n");
      out.write("    \t \t\t\t           formatter: function(params) {\r\n");
      out.write("    \t \t\t\t               if(params.dataType == 'edge'){\r\n");
      out.write("    \t \t\t\t                   var info = '<p style=\"font-size:14px\">' + params.name + '</p>'\r\n");
      out.write("    \t \t\t\t                   info = info + '<p style=\"font-size:14px\">' + params.value + '</p>'\r\n");
      out.write("    \t \t\t\t                   return info;\r\n");
      out.write("    \t \t\t\t               }\r\n");
      out.write("    \t \t\t\t               \r\n");
      out.write("    \t \t\t\t               if (params.name in infos) {\r\n");
      out.write("    \t \t\t\t                   var info = '<p style=\"font-size:14px\">' + params.name + '</p>'\r\n");
      out.write("    \t \t\t\t                   for (var p in infos[params.name]) {\r\n");
      out.write("    \t \t\t\t                       info = info + '<p style = \"font-size:12px\" >' + p + ':' + infos[params.name][p] + '</p>'\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t                   return info;\r\n");
      out.write("    \t \t\t\t               }\r\n");
      out.write("    \t \t\t\t           },\r\n");
      out.write("    \t \t\t\t           backgroundColor: \"#ff7f50\", //提示标签背景颜色 \r\n");
      out.write("    \t \t\t\t           textStyle: {\r\n");
      out.write("    \t \t\t\t               color: \"#fff\"\r\n");
      out.write("    \t \t\t\t           } //提示标签字体颜色 \r\n");
      out.write("    \t \t\t\t       },\r\n");
      out.write("    \t \t\t\t       animationDurationUpdate: 1500,\r\n");
      out.write("    \t \t\t\t       animationEasingUpdate: 'quinticInOut',\r\n");
      out.write("    \t \t\t\t       label: {\r\n");
      out.write("    \t \t\t\t           normal: {\r\n");
      out.write("    \t \t\t\t               show: true,\r\n");
      out.write("    \t \t\t\t               textStyle: {\r\n");
      out.write("    \t \t\t\t                   fontSize: 12\r\n");
      out.write("    \t \t\t\t               },\r\n");
      out.write("    \t \t\t\t           }\r\n");
      out.write("    \t \t\t\t       },\r\n");
      out.write("    \t \t\t\t       legend: {\r\n");
      out.write("    \t \t\t\t           x: \"center\",\r\n");
      out.write("    \t \t\t\t           show: true,\r\n");
      out.write("    \t \t\t\t           data: legend \r\n");
      out.write("    \t \t\t\t       },\r\n");
      out.write("    \t \t\t\t       series: [\r\n");
      out.write("    \t \t\t\t           {\r\n");
      out.write("    \t \t\t\t               type: 'graph',\r\n");
      out.write("    \t \t\t\t               layout: 'force',\r\n");
      out.write("    \t \t\t\t               symbolSize: 45,\r\n");
      out.write("    \t \t\t\t               focusNodeAdjacency: true,\r\n");
      out.write("    \t \t\t\t               roam: true,\r\n");
      out.write("    \t \t\t\t               categories: [{\r\n");
      out.write("    \t \t\t\t                   name: legend[0],\r\n");
      out.write("    \t \t\t\t                   itemStyle: {\r\n");
      out.write("    \t \t\t\t                       normal: {\r\n");
      out.write("    \t \t\t\t                           color: \"#009800\",\r\n");
      out.write("    \t \t\t\t                       }\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               }, {\r\n");
      out.write("    \t \t\t\t                   name: legend[1],\r\n");
      out.write("    \t \t\t\t                   itemStyle: {\r\n");
      out.write("    \t \t\t\t                       normal: {\r\n");
      out.write("    \t \t\t\t                           color: \"#9592FF\",\r\n");
      out.write("    \t \t\t\t                       }\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               }, {\r\n");
      out.write("    \t \t\t\t                   name: legend[2],\r\n");
      out.write("    \t \t\t\t                   itemStyle: {\r\n");
      out.write("    \t \t\t\t                       normal: {\r\n");
      out.write("    \t \t\t\t                           color: \"#3592FF\",\r\n");
      out.write("    \t \t\t\t                       }\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               },\r\n");
      out.write("    \t \t\t\t                {\r\n");
      out.write("    \t \t\t\t                   name: legend[3],\r\n");
      out.write("    \t \t\t\t                   itemStyle: {\r\n");
      out.write("    \t \t\t\t                       normal: {\r\n");
      out.write("    \t \t\t\t                           color: \"#33362F\",\r\n");
      out.write("    \t \t\t\t                       }\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               },\r\n");
      out.write("    \t \t\t\t                {\r\n");
      out.write("    \t \t\t\t                   name: legend[4],\r\n");
      out.write("    \t \t\t\t                   itemStyle: {\r\n");
      out.write("    \t \t\t\t                       normal: {\r\n");
      out.write("    \t \t\t\t                           color: \"#31592F\",\r\n");
      out.write("    \t \t\t\t                       }\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               },\r\n");
      out.write("    \t \t\t\t                {\r\n");
      out.write("    \t \t\t\t                   name: legend[5],\r\n");
      out.write("    \t \t\t\t                   itemStyle: {\r\n");
      out.write("    \t \t\t\t                       normal: {\r\n");
      out.write("    \t \t\t\t                           color: \"#36782F\",\r\n");
      out.write("    \t \t\t\t                       }\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               },\r\n");
      out.write("    \t \t\t\t                {\r\n");
      out.write("    \t \t\t\t                   name: legend[6],\r\n");
      out.write("    \t \t\t\t                   itemStyle: {\r\n");
      out.write("    \t \t\t\t                       normal: {\r\n");
      out.write("    \t \t\t\t                           color: \"#31892F\",\r\n");
      out.write("    \t \t\t\t                       }\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               },\r\n");
      out.write("    \t \t\t\t                {\r\n");
      out.write("    \t \t\t\t                   name: legend[7],\r\n");
      out.write("    \t \t\t\t                   itemStyle: {\r\n");
      out.write("    \t \t\t\t                       normal: {\r\n");
      out.write("    \t \t\t\t                           color: \"#31122F\",\r\n");
      out.write("    \t \t\t\t                       }\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               },\r\n");
      out.write("    \t \t\t\t                {\r\n");
      out.write("    \t \t\t\t                   name: legend[8],\r\n");
      out.write("    \t \t\t\t                   itemStyle: {\r\n");
      out.write("    \t \t\t\t                       normal: {\r\n");
      out.write("    \t \t\t\t                           color: \"#33392F\",\r\n");
      out.write("    \t \t\t\t                       }\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               }],\r\n");
      out.write("    \t \t\t\t               label: {\r\n");
      out.write("    \t \t\t\t                   normal: {\r\n");
      out.write("    \t \t\t\t                       show: true,\r\n");
      out.write("    \t \t\t\t                       textStyle: {\r\n");
      out.write("    \t \t\t\t                           fontSize: 12\r\n");
      out.write("    \t \t\t\t                       },\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               },\r\n");
      out.write("    \t \t\t\t               force: {\r\n");
      out.write("    \t \t\t\t                   repulsion: 1000\r\n");
      out.write("    \t \t\t\t               },\r\n");
      out.write("    \t \t\t\t               edgeSymbolSize: [4, 50],\r\n");
      out.write("    \t \t\t\t               edgeLabel: {\r\n");
      out.write("    \t \t\t\t                   normal: {\r\n");
      out.write("    \t \t\t\t                       show: true,\r\n");
      out.write("    \t \t\t\t                       textStyle: {\r\n");
      out.write("    \t \t\t\t                           fontSize: 10\r\n");
      out.write("    \t \t\t\t                       },\r\n");
      out.write("    \t \t\t\t                       formatter: \"{c}\"\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               },\r\n");
      out.write("    \t \t\t\t               data: echar_data,\r\n");
      out.write("    \t \t\t\t               links: echar_links,\r\n");
      out.write("    \t \t\t\t               lineStyle: {\r\n");
      out.write("    \t \t\t\t                   normal: {\r\n");
      out.write("    \t \t\t\t                       opacity: 0.9,\r\n");
      out.write("    \t \t\t\t                       width: 1,\r\n");
      out.write("    \t \t\t\t                       curveness: 0\r\n");
      out.write("    \t \t\t\t                   }\r\n");
      out.write("    \t \t\t\t               }\r\n");
      out.write("    \t \t\t\t           }\r\n");
      out.write("    \t \t\t\t       ]\r\n");
      out.write("    \t \t\t\t   };\r\n");
      out.write("    \t \t\t\t   myChart2.setOption(option2) ;\r\n");
      out.write("    \t \t\t}\t\r\n");
      out.write("    \t \t},\r\n");
      out.write("    \t\terror:function(errorMsg){\r\n");
      out.write("    \t\t\talert(\"图表数据请求失败！\");\r\n");
      out.write("    \t\t\tmyChart.hideLoading();\r\n");
      out.write("    \t\t}\t \r\n");
      out.write("    \t })\r\n");
      out.write("\t  \r\n");
      out.write("\t   // =======================\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t   //数据正确性检查\r\n");
      out.write("\t   //检查节点是否有重复人名\r\n");
      out.write("\t   \r\n");
      out.write("\t   \r\n");
      out.write("\r\n");
      out.write("\t   //格式化输入数据\r\n");
      out.write("\t  \r\n");
      out.write("\t   \r\n");
      out.write("\r\n");
      out.write("\t   \r\n");
      out.write("\t   }\r\n");
      out.write("   </script>\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   <script >//时间模块\r\n");
      out.write("   var t = null;\r\n");
      out.write("   t = setTimeout(time, 1000); //開始运行\r\n");
      out.write("   function time() {\r\n");
      out.write("     clearTimeout(t); //清除定时器\r\n");
      out.write("     dt = new Date();\r\n");
      out.write("     var y = dt.getFullYear();\r\n");
      out.write("     var mt = dt.getMonth() + 1;\r\n");
      out.write("     var day = dt.getDate();\r\n");
      out.write("     var h = dt.getHours(); //获取时\r\n");
      out.write("     var m = dt.getMinutes(); //获取分\r\n");
      out.write("     var s = dt.getSeconds(); //获取秒\r\n");
      out.write("     document.querySelector(\".showTime\").innerHTML =\r\n");
      out.write("       \"当前时间：\" +\r\n");
      out.write("       y +\r\n");
      out.write("       \"年\" +\r\n");
      out.write("       mt +\r\n");
      out.write("       \"月\" +\r\n");
      out.write("       day +\r\n");
      out.write("       \"-\" +\r\n");
      out.write("       h +\r\n");
      out.write("       \"时\" +\r\n");
      out.write("       m +\r\n");
      out.write("       \"分\" +\r\n");
      out.write("       s +\r\n");
      out.write("       \"秒\";\r\n");
      out.write("     t = setTimeout(time, 1000); //设定定时器，循环运行\r\n");
      out.write("   }\r\n");
      out.write("   </script>  \r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<header>\r\n");
      out.write("\t<a   href=\"home\" style=\"text-decoration:none\"><span class=\"left\">买家中心</span>\r\n");
      out.write("    <h1>天猫超市销售数据实时监控</h1> </a>  \r\n");
      out.write("    <div class=\"showTime\"></div>\r\n");
      out.write("    <script>time</script>\r\n");
      out.write("</header>\r\n");
      out.write(" <div class=\"main_box\">\r\n");
      out.write("\t<div class=\"column1\">\r\n");
      out.write("\t\t<h2><a href=\"DealServlet?action=show\" >商品总销量</a>                \r\n");
      out.write("                    </h2>\r\n");
      out.write("\t\t<div class=\"zzchart\" style=\"width:500px;height:300px; \"></div>\r\n");
      out.write("          \t\t\t<script>zzchart();</script>\r\n");
      out.write("\t\t<h2><a href=\"DealServlet?action=show\" >商品月销量趋势</a> <a href=\"javacript:;\">2021</a><a href=\"javascript:;\">2020</a></h2>\r\n");
      out.write("          \t\t<div class=\"zxchart\" style=\"width:500px;height:500px;\"></div>\r\n");
      out.write("\t \t\t<script  type=\"text/javascript\">zxchart();</script></div>      \r\n");
      out.write("\t<div class=\"column2\">\r\n");
      out.write("        <div id=\"jifenbiao\" style=\"width:550px;height:300px; \"></div>\r\n");
      out.write("         \t <script>jifenbiao();</script>\r\n");
      out.write("\t\t<h2><a href=\"SpServlet?action=show\" >商品详情</a></h2>\r\n");
      out.write("\t\t<div id=\"detail\" style=\"width:550px;height:800px;\"></div>\r\n");
      out.write("\t\t\t<script  type=\"text/javascript\">detail();</script>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"column3\">\r\n");
      out.write("\t\t<h2><a href=\"SpServlet?action=show\" >商品回购率</a></h2>\r\n");
      out.write("\t\t<div class=\"zzchart2\" style=\"width:500px;height:300px; \"></div>\r\n");
      out.write("          \t\t\t<script>zzchart2();</script>\r\n");
      out.write("\t\t<h2><a href=\"SpServlet?action=show\" >聚划算活动销量占比统计 </a></h2>\r\n");
      out.write("          \t\t<div class=\"bxchart\" style=\"width:500px;height:550px;background: rgba(255, 255, 255, 0.03);border-radius:5px;\"></div>\r\n");
      out.write("\t\t\t <script  type=\"text/javascript\">bxchart();</script></div>\r\n");
      out.write("\r\n");
      out.write("</div>\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
